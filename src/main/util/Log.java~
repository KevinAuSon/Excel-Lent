package com.util;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class Log {
	public static final boolean DEBUG_MODE = true;
	private static final boolean ECLIPSE = false	;
	
	private static final DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss.SSSSSS");
	private static final String OS = System.getProperty("os.name").toLowerCase();
	
	private static final String RESET = "\u001B[0m";
	private static final String RED = "\u001B[31m";
	private static final String GREEN = "\u001B[32m";
	private static final String YELLOW = "\u001B[33m";
	private static final String BLUE = "\u001B[34m";
	
	@SuppressWarnings("unused")
	private static final void printMessage(String text, String mode, String color) {
		Date date = new Date();
		String prefix = "[_LOG_LEVEL_" + mode + " " + dateFormat.format(date) + "]";
			
		if(OS.indexOf("win") < 0 && !ECLIPSE)
			prefix = color + prefix + RESET;
		
		System.out.print(prefix + " " + text);
	}
	
	private static final void printMessageReturn(String text, String mode, String color) {
		printMessage(text + "\n", mode, color);
	}
	
	public static final void d(Object t) {
		if(DEBUG_MODE)
			printMessageReturn(t.toString(), "DEBUG", BLUE);		
	}
	
	public static final void d(String t) {
		if(DEBUG_MODE)
			printMessageReturn(t, "DEBUG", BLUE);		
	}
	
	public static final void d(int t) {
		if(DEBUG_MODE)
			printMessageReturn(Integer.toString(t), "DEBUG", BLUE);		
	}
	
	public static final void d(double t) {
		if(DEBUG_MODE)
			printMessageReturn(Double.toString(t), "DEBUG", BLUE);		
	}
	
	public static final void d(float t) {
		if(DEBUG_MODE)
			printMessageReturn(Float.toString(t), "DEBUG", BLUE);		
	}
	
	public static final void i(String t) {
		if(DEBUG_MODE)
			printMessageReturn(t, "INFO", GREEN);		
		else
			System.out.println(t + "\n");
	}
	
	public static final void iWithoutReturn(String t) {
		if(DEBUG_MODE)
			printMessage(t, "INFO", GREEN);		
		else
			System.out.println(t);
	}
	
	public static final void w(String t) {
		if(DEBUG_MODE)
			printMessageReturn(t, "WARNING", YELLOW);	
		else
			System.out.println(t + "\n");
	}
	
	public static final void e(String t) {
		if(DEBUG_MODE)
			printMessageReturn(t, "ERROR", RED);	
		else
		{
			System.out.println(t + "\n");
			System.exit(1);
		}
	}
	
	public static final void e(Exception e) {
		if(DEBUG_MODE)
		{
			printMessageReturn(e.getMessage(), "ERROR", RED);	
			e.printStackTrace();
		}
		else
		{
			System.out.println(e.getMessage() + "\n");
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	public static final void exit(){
		System.exit(1);
	}
	
	public static final void begin_loading(String t){
		iWithoutReturn(t);
	}
	
	public static final void end_loading(String t){
		System.out.println(t);
	}
	
	
}